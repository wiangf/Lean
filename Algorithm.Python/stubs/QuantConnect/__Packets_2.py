import typing
import System.IO
import System.Collections.Generic
import System
import QuantConnect.Statistics
import QuantConnect.Securities
import QuantConnect.Packets
import QuantConnect.Orders
import QuantConnect.Algorithm.Framework.Alphas
import QuantConnect
import datetime


class RuntimeErrorPacket(QuantConnect.Packets.Packet):
    """
    Algorithm runtime error packet from the lean engine. 
                This is a managed error which stops the algorithm execution.
    
    RuntimeErrorPacket()
    RuntimeErrorPacket(userId: int, algorithmId: str, message: str, stacktrace: str)
    """
    @staticmethod # known case of __new__
    @typing.overload
    def __new__(self) -> None:
        pass

    @typing.overload
    def __new__(self, userId: int, algorithmId: str, message: str, stacktrace: str) -> None:
        pass

    def __new__(self, *args) -> None:
        pass

    AlgorithmId: str
    Message: str
    StackTrace: str
    UserId: int

class SecurityTypesPacket(QuantConnect.Packets.Packet):
    """
    Security types packet contains information on the markets the user data has requested.
    
    SecurityTypesPacket()
    """
    TypesCSV: str

    Types: typing.List[QuantConnect.SecurityType]


class StatusHistoryResult(QuantConnect.Packets.HistoryResult):
    """
    Specifies the progress of a request
    
    StatusHistoryResult()
    StatusHistoryResult(progress: int)
    """
    @staticmethod # known case of __new__
    @typing.overload
    def __new__(self) -> None:
        pass

    @typing.overload
    def __new__(self, progress: int) -> None:
        pass

    def __new__(self, *args) -> None:
        pass

    Progress: int

class SystemDebugPacket(QuantConnect.Packets.DebugPacket):
    """
    Debug packets generated by Lean
    
    SystemDebugPacket()
    SystemDebugPacket(projectId: int, algorithmId: str, compileId: str, message: str, toast: bool)
    """
    @staticmethod # known case of __new__
    @typing.overload
    def __new__(self) -> None:
        pass

    @typing.overload
    def __new__(self, projectId: int, algorithmId: str, compileId: str, message: str, toast: bool) -> None:
        pass

    def __new__(self, *args) -> None:
        pass
